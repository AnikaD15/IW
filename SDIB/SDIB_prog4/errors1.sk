int n = 20;
bit check(int[n] a, int i) {
   if(a[i]-a[i-1]==0) 
        return ??(1);

   return ??(1);
}
int wrong(int[n] a)
{
    int i,j,tem;
    for(i=0; i<n-1; i++)
    {
        for(j=0; j<n-1-i; j++)
        {
            if(a[j]>a[j+1])
            {
                tem=a[j];
                a[j]=a[j+1];
                a[j+1]=tem;
            }
        }
    }
    int count=0;
    for(i=1; i<n; i++)
    {
        if(a[i]-a[i-1]==1)
            count++;
        else if(a[i]-a[i-1]==0)
            i = i;
        else
            count=0;
        if(check(a, i)){
            if(count==2)
            {
                return 1;
            }
        }
    }
    if(i>=n)
        return 0;
}
int correct(int[n] a)
{
    int i,j,tem;
    for(i=0; i<n-1; i++)
    {
        for(j=0; j<n-1-i; j++)
        {
            if(a[j]>a[j+1])
            {
                tem=a[j];
                a[j]=a[j+1];
                a[j+1]=tem;
            }
        }
    }
    int count=0;
    for(i=1; i<n; i++)
    {
        if(a[i]-a[i-1]==1)
            count++;
        else if(a[i]-a[i-1]==0)
            i = i;
        else
            count=0;
        if(!(a[i]-a[i-1]==0)){
            if(count==2)
            {
                return 1;
            }
        }
    }
    if(i>=n)
        return 0;
}
harness void main(int[n] nums){
	assert correct(nums) == wrong(nums);
}