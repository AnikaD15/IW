int n = 5;
int prod_mode(int[n] a)
{
	int i, temp;
	int[101] b = {0}; //= {0};
	int t=0, max=0;
	void prod_majority(){
		for (i = 0; i < n; i++)	{
			if (b[a[i]] >= 3)
			{
				max = 3 * a[i];
				return;
			}
		}
		return;
	}
	void prod_minority(){
		for (i = 0; i < n; i++)	{
			if (b[a[i]] == 2)
			{
				temp = a[i] * 2;
				if (temp > max)
				{
					max = temp;
					if(??){
						return;
					}
				}
			}
		}
		return;
	}
	for (i = 0; i < n; i++)
	{
		b[a[i]]++;
		t += a[i];
	}
	prod_majority();
	prod_minority();
	return t-max;
}
int prod_mode_correct(int[n] a)
{
	int i, temp;
	int[101] b = {0}; //= {0};
	int t=0, max=0;
	void prod_majority(){
		for (i = 0; i < n; i++)	{
			if (b[a[i]] >= 3)
			{
				max = 3 * a[i];				
				return;
			}
		}
		return;
	}
	void prod_minority(){
		for (i = 0; i < n; i++)	{
			if (b[a[i]] == 2)
			{
				temp = a[i] * 2;
				if (temp > max)
				{
					max = temp;
				}
			}
		}
		return;
	}
	for (i = 0; i < n; i++)
	{
		b[a[i]]++;
		t += a[i];
	}
	prod_majority();
	prod_minority();
	return t-max;
}
harness void main(int[n] a){
	assert prod_mode(a) == prod_mode_correct(a);
}
