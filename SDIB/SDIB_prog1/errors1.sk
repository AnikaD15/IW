int wrong(int n)
{
    int sum=0, z, i, k, j, b, flag=0;
    void break_exp(){
        for(i=z-(k*7); k!=0; k--)
        {
            i=z-(k*7);
            if(i%4==0)
            {
                flag=1;
                if(??){
                    return;
                }
            }
        } 
        return;
    }
    z=n;
    if(z%7==0)
    {
        flag=1;
    }
    if(z%7!=0 && flag==0)
    {
        k=z/7;
        break_exp();
    }
    if(z%4==0 && flag==0)
    {
        flag=1;
    }
    if(flag==0)
        return 0;
    return 1;
}
int correct(int n)
{
    int sum=0, z, i, k, j, b, flag=0;
    void break_exp(){
        for(i=z-(k*7); k!=0; k--)
        {
            i=z-(k*7);
            if(i%4==0)
            {
                flag=1;
                return;
            }
        } 
        return;
    }
    z=n;
    if(z%7==0)
    {
        flag=1;
    }
    if(z%7!=0 && flag==0)
    {
        k=z/7;
        break_exp();
    }
    if(z%4==0 && flag==0)
    {
        flag=1;
    }
    if(flag==0)
        return 0;
    return 1;
}
harness void main(int n){
    assert wrong(n) == correct(n);
}
